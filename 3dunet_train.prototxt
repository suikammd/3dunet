name: "3dunet"
layer {
    name: "data"
    type" "Input"
    top: "data"
    input_param { shape: {dim: 1 dim 3 dim: 32 dim: 32 dim: 32}}
}

layer {
    name: "encoding0_0"
    type: "Convolution"
    bottom: "data"
    top: "encoding0_0"
    convolution_param {
        num_output: 32
        kernel_size; 3
        stride: 1
        weight_filer {
            type: "gaussian"
            std: 0.1
        }
        bias_filer {
            type: "constant"
            value: 0.0
        }
    }
}
layer {
    name: "encoding0_bn1"
    top: "encoding0_0"
    bottom: "encoding0_0"
    type: "BatchNorm"
    batch_norm_param {
        use_global_stats: true
    }
}
layer {
    name: "encoding0_relu1"
    type: "ReLU"
    bottom: "encoding0_bn1"
    top: "encoding0_bn1"
}
layer {
    name: "encoding0_1"
    type: "Convolution"
    bottom: "encoding0_relu1"
    top: "encoding0_1"
    convolution_param {
        num_output: 32
        kernel_size; 3
        stride: 1
        weight_filer {
            type: "gaussian"
            std: 0.1
        }
        bias_filer {
            type: "constant"
            value: 0.0
        }
    }
}
layer {
    name: "encoding0_bn2"
    bottom: "encoding0_1"
    top: "encoding0_bn2"
    type: "BatchNorm"
    batch_norm_param {
        use_global_stats: true
    }
}
layer {
    name: "encoding0_relu2"
    type: "ReLU"
    top: "encoding0_relu2"
    bottom: "encoding0_bn2"
}

layer {
    name: "pool1"
    type: "Pooling"
    bottom: "encoding0_relu2"
    top: "pool1"
    pooling_param {
        pool: MAX
        kernel_size: 3
        stride: 2
        engine: CAFFE
    }
}


layer {
    name: "encoding1_0"
    type: "Convolution"
    bottom: "data"
    top: "encoding1_0"
    convolution_param {
        num_output: 64
        kernel_size; 3
        stride: 1
        weight_filer {
            type: "gaussian"
            std: 0.1
        }
        bias_filer {
            type: "constant"
            value: 0.0
        }
    }
}
layer {
    name: "encoding1_0"
    top: "encoding1_0"
    bottom: "encoding1_0"
    name: "encoding1_bn1"
    type: "BatchNorm"
    batch_norm_param {
        use_global_stats: true
    }
}
layer {
    name: "encoding1_relu1"
    type: "ReLU"
    bottom: "encoding1_bn1"
    top: "encoding1_bn1"
}
layer {
    name: "encoding1_1"
    type: "Convolution"
    bottom: "encoding1_relu1"
    top: "encoding1_relu1"
    convolution_param {
        num_output: 64
        kernel_size; 3
        stride: 1
        weight_filer {
            type: "gaussian"
            std: 0.1
        }
        bias_filer {
            type: "constant"
            value: 0.0
        }
    }
}
layer {
    name: "encoding1_1"
    top: "encoding1_1"
    name: "encoding1_bn2"
    type: "BatchNorm"
    batch_norm_param {
        use_global_stats: true
    }
}
layer {
    name: "encoding1_relu2"
    type: "ReLU"
    bottom: "encoding1_bn2"
    top: "encoding1_bn2"
}

layer {
    name: "pool2"
    type: "Pooling"
    bottom: "encoding1_relu2"
    top: "pool2"
    pooling_param {
        pool: MAX
        kernel_size: 3
        stride: 2
        engine: CAFFE
    }
}

layer {
    name: "encoding2_0"
    type: "Convolution"
    bottom: "data"
    top: "encoding2_0"
    convolution_param {
        num_output: 128
        kernel_size; 3
        stride: 1
        weight_filer {
            type: "gaussian"
            std: 0.1
        }
        bias_filer {
            type: "constant"
            value: 0.0
        }
    }
}
layer {
    name: "encoding2_0"
    top: "encoding2_0"
    bottom: "encoding2_0"
    name: "encoding2_bn1"
    type: "BatchNorm"
    batch_norm_param {
        use_global_stats: true
    }
}
layer {
    name: "encoding2_relu1"
    type: "ReLU"
    bottom: "encoding2_bn1"
    top: "encoding2_bn1"
}
layer {
    name: "encoding2_1"
    type: "Convolution"
    bottom: "encoding2_relu1"
    top: "encoding2_relu1"
    convolution_param {
        num_output: 128
        kernel_size; 3
        stride: 1
        weight_filer {
            type: "gaussian"
            std: 0.1
        }
        bias_filer {
            type: "constant"
            value: 0.0
        }
    }
}
layer {
    name: "encoding2_1"
    top: "encoding2_1"
    name: "encoding2_bn2"
    type: "BatchNorm"
    batch_norm_param {
        use_global_stats: true
    }
}
layer {
    name: "encoding2_relu2"
    type: "ReLU"
    bottom: "encoding2_bn2"
    top: "encoding2_bn2"
}

layer {
    name: "pool3"
    type: "Pooling"
    bottom: "encoding2_relu2"
    top: "pool3"
    pooling_param {
        pool: MAX
        kernel_size: 3
        stride: 2
        engine: CAFFE
    }
}

layer {
    name: "bottom_0"
    type: "Convolution"
    bottom: "data"
    top: "bottom_0"
    convolution_param {
        num_output: 256
        kernel_size; 3
        stride: 1
        weight_filer {
            type: "gaussian"
            std: 0.1
        }
        bias_filer {
            type: "constant"
            value: 0.0
        }
    }
}
layer {
    name: "bottom_0"
    top: "bottom_0"
    bottom: "bottom_0"
    name: "bottom_bn1"
    type: "BatchNorm"
    batch_norm_param {
        use_global_stats: true
    }
}
layer {
    name: "bottom_relu1"
    type: "ReLU"
    bottom: "bottom_bn1"
    top: "bottom_bn1"
}
layer {
    name: "bottom_1"
    type: "Convolution"
    bottom: "bottom_relu1"
    top: "bottom_relu1"
    convolution_param {
        num_output: 256
        kernel_size; 3
        stride: 1
        weight_filer {
            type: "gaussian"
            std: 0.1
        }
        bias_filer {
            type: "constant"
            value: 0.0
        }
    }
}
layer {
    name: "bottom_1"
    top: "bottom_1"
    name: "bottom_bn2"
    type: "BatchNorm"
    batch_norm_param {
        use_global_stats: true
    }
}
layer {
    name: "bottom_relu2"
    type: "ReLU"
    bottom: "bottom_bn2"
    top: "bottom_bn2"
}

layer {
    name: "pool4"
    type: "Pooling"
    bottom: "bottom_relu2"
    top: "pool4"
    pooling_param {
        pool: MAX
        kernel_size: 3
        stride: 2
        engine: CAFFE
    }
}